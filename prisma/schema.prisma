generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  fullName          String
  email             String    @unique
  password          String
  emailVerified     Boolean   @default(false)
  emailVerifiedTime DateTime?
  verificationToken String?
  tokenExpiry       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  passwordReset     PasswordReset?
  content           Content[]
  students          Student[]
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Content {
  id            Int      @id @default(autoincrement())
  title         String
  fileName      String
  fileType      String
  filePath      String
  fileSize      Int
  status        String   @default("processing")
  mcqsGenerated Int      @default(0)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model Student {
  id            Int      @id @default(autoincrement())
  name          String
  email         String
  phone         String
  department    String
  status        String   @default("active") // "active" or "inactive"
  totalQuizzes  Int      @default(0)
  averageScore  Float    @default(0.0)
  lastActivity  String   @default("Never")
  teacher       User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([teacherId])
  @@index([email, teacherId])
}