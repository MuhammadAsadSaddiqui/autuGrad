generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  fullName          String
  email             String    @unique
  password          String
  emailVerified     Boolean   @default(false)
  emailVerifiedTime DateTime?
  verificationToken String?
  tokenExpiry       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  passwordReset     PasswordReset?
  content           Content[]
  students          Student[]
  mcqSets           MCQSet[]
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Content {
  id            Int      @id @default(autoincrement())
  title         String
  fileName      String
  fileType      String
  filePath      String
  fileSize      Int
  status        String   @default("processing")
  mcqsGenerated Int      @default(0)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  mcqSets       MCQSet[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model Student {
  id            Int      @id @default(autoincrement())
  name          String
  email         String
  phone         String
  department    String
  status        String   @default("active")
  totalQuizzes  Int      @default(0)
  averageScore  Float    @default(0.0)
  lastActivity  String   @default("Never")
  teacher       User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([teacherId])
  @@index([email, teacherId])
}

model MCQSet {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  status         String       @default("pending")  // pending, generating, completed, failed
  workflowId     String?      @unique
  totalQuestions Int          @default(0)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  content        Content      @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId      Int
  questions      MCQQuestion[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([userId])
  @@index([contentId])
  @@index([status])
}

model MCQQuestion {
  id        Int      @id @default(autoincrement())
  question  String   @db.Text
  optionA   String   @db.Text
  optionB   String   @db.Text
  optionC   String   @db.Text
  optionD   String   @db.Text
  answer    String   // A, B, C, or D
  mcqSet    MCQSet   @relation(fields: [mcqSetId], references: [id], onDelete: Cascade)
  mcqSetId  Int
  createdAt DateTime @default(now())

  @@index([mcqSetId])
}